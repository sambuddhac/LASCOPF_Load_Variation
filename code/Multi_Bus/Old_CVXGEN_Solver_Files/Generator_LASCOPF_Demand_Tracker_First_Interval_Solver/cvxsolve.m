% Produced by CVXGEN, 2016-05-03 18:52:49 -0400.
% CVXGEN is Copyright (C) 2006-2012 Jacob Mattingley, jem@cvxgen.com.
% The code in this file is Copyright (C) 2006-2012 Jacob Mattingley.
% CVXGEN, or solvers produced by CVXGEN, cannot be used for commercial
% applications without prior written permission from Jacob Mattingley.

% Filename: cvxsolve.m.
% Description: Solution file, via cvx, for use with sample.m.
function [vars, status] = cvxsolve(params, settings)
B = params.B;
D = params.D;
PgMax = params.PgMax;
PgMin = params.PgMin;
PgNextNu = params.PgNextNu;
PgNu = params.PgNu;
PgPrev = params.PgPrev;
Pg_N_avg = params.Pg_N_avg;
Pg_N_init = params.Pg_N_init;
RgMax = params.RgMax;
RgMin = params.RgMin;
Thetag_N_avg = params.Thetag_N_avg;
Vg_N_avg = params.Vg_N_avg;
beta = params.beta;
c0 = params.c0;
c1 = params.c1;
c2 = params.c2;
gamma = params.gamma;
lambda_1 = params.lambda_1;
lambda_2 = params.lambda_2;
ones = params.ones;
rho = params.rho;
ug_N = params.ug_N;
vg_N = params.vg_N;
cvx_begin
  % Caution: automatically generated by cvxgen. May be incorrect.
  variable Pg;
  variable PgNext;
  variable Thetag(11, 1);

  minimize(c2*square(Pg) + c1*Pg + c0 + (beta/2)*(square(Pg - PgNu) + square(PgNext - PgNextNu)) + gamma*(B*Pg + D*PgNext) + lambda_1*Pg + lambda_2*PgNext + (rho/2)*sum(square(ones*Pg - Pg_N_init + Pg_N_avg + ug_N) + square(Thetag - Vg_N_avg - Thetag_N_avg + vg_N)));
  subject to
    PgMin <= Pg;
    Pg <= PgMax;
    RgMin <= PgNext - Pg;
    PgNext - Pg <= RgMax;
    RgMin <= Pg - PgPrev;
    Pg - PgPrev <= RgMax;
cvx_end
vars.Pg = Pg;
vars.PgNext = PgNext;
vars.Thetag = Thetag;
status.cvx_status = cvx_status;
% Provide a drop-in replacement for csolve.
status.optval = cvx_optval;
status.converged = strcmp(cvx_status, 'Solved');
